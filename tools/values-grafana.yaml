grafana.ini:
  server:
    #TODO route53
    root_url: http://a3595507a38d548feb7232b7ef3c8e4d-1664469649.eu-west-1.elb.amazonaws.com/grafana/
    serve_from_sub_path: true

# Avoid creating a bunch of RBAC rules for features we are not enabling
rbac:
  create: false
  pspEnabled: false

# Disable test pods
testFramework:
  enabled: false

# For istioctl dashboard, we will look for this label
podLabels:
  app: grafana
  sidecar.istio.io/inject: "false"

# Demo only, so we will have no authentication
admin:
  existingSecret: true
ldap:
  existingSecret: true
env:
  GF_SECURITY_ADMIN_USER: "-"
  GF_SECURITY_ADMIN_PASSWORD: "-"
  GF_AUTH_BASIC_ENABLED: "false"
  GF_AUTH_ANONYMOUS_ENABLED: "true"
  GF_AUTH_ANONYMOUS_ORG_ROLE: Admin

# Expose on port 3000 to match the Istio docs
service:
  port: 3000

# Set up out dashboards
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: 'istio'
        orgId: 1
        folder: 'istio'
        type: file
        disableDeletion: false
        options:
          path: /var/lib/grafana/dashboards/istio
      - name: 'istio-services'
        orgId: 1
        folder: 'istio'
        type: file
        disableDeletion: false
        options:
          path: /var/lib/grafana/dashboards/istio-services

dashboardsConfigMaps:
  istio: "istio-grafana-dashboards"
  istio-services: "istio-services-grafana-dashboards"
  flagger: "istio-services-grafana-flagger-dashboards"

# Configure the prometheus data source. We expect prometheus:9090 in the same namespace
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        orgId: 1
        url: http://prometheus.tools.svc.cluster.local:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: 5s
        editable: true